openapi: 3.0.2
info:
  title: PubNub Objects API
  description: >
    The PubNub Objects API enables you to create and retrieve data associated with key objects in the PubNub realtime application platform.
  contact:
    name: PubNub Support
    url: https://www.pubnub.com/support
    email: support@pubnub.com
  termsOfService: https://www.pubnub.com/terms-and-conditions/
  version: 1.0.0
servers:
  - url: https://ps.pndsn.com
tags:
  - name: user
    description: Manage one or more users
  - name: space
    description: Manage spaces
  - name: membership
    description: Manage memberships, by space and by user
paths:
#
# Please make sure all response codes are listed for each method,
# even if it's not explicitly *our* code returning it (for example,
# maybe PAM is returning the error and we're just passing it through).
#
  /v1/objects/{sub_key}/users:
    parameters:
      - $ref: '#/components/parameters/AuthQueryParam'
      - $ref: '#/components/parameters/SignatureQueryParam'
      - $ref: '#/components/parameters/TimestampQueryParam'
      - $ref: '#/components/parameters/SubKeyPathParam'
    get:
      tags:
        - user
      summary: Get all users
      description: >
        Returns a paginated list of users associated with the given subscription key, optionally including each user record's custom data object.
      parameters:
        - $ref: '#/components/parameters/UserIncludeQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/StartQueryParam'
        - $ref: '#/components/parameters/EndQueryParam'
        - $ref: '#/components/parameters/TotalCountQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        200:
          description: Successfully returned the list of users.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserListResponse'
        304:
          description: Requested resource has not been modified since last retrieval.
        403:
          $ref: '#/components/responses/Forbidden'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - user
      summary: Create a user
      description: >
        Creates a user with the specified attributes. Returns the created user object, optionally including the user's custom data object.


        **Notes:**
          * The custom object can only contain scalar values.
          * User ID and name are required.
          * Returns 400 if required properties are missing, or if any properties are of the wrong type.
          * Returns 409 if a user already exists with the specified ID.
          * Returns 415 if the request body is _not_ in JSON format.
      parameters:
        - $ref: '#/components/parameters/UserIncludeQueryParam'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserInput'
        description: >
          JSON object with user attributes.
      responses:
        200:
          description: Successfully created the user.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/objects/{sub_key}/users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/AuthQueryParam'
      - $ref: '#/components/parameters/SignatureQueryParam'
      - $ref: '#/components/parameters/TimestampQueryParam'
      - $ref: '#/components/parameters/SubKeyPathParam'
      - $ref: '#/components/parameters/UserIdPathParam'
    get:
      tags:
        - user
      summary: Fetch a user
      description: Returns the specified user object, optionally including the user's custom data object.
      parameters:
        - $ref: '#/components/parameters/UserIncludeQueryParam'
      responses:
        200:
          description: Successfully fetched the requested user.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'
        304:
          description: Requested resource has not been modified since last retrieval.
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    patch:
      tags:
        - user
      summary: Update a user
      description: >
        Updates the specified user object with any new information you provide. Returns the updated user object, optionally including the user's custom data object.


        **Notes:**
          * You can change all of the user object's properties, except its ID.
          * Invalid property names are silently ignored and will _not_ cause a request to fail.
          * If you update the "custom" property, you must completely replace it; partial updates are not supported.
          * The custom object can only contain scalar values.
      parameters:
        - $ref: '#/components/parameters/UserIncludeQueryParam'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        description: >
          JSON object with user attributes to update.
      responses:
        200:
          description: Successfully updated the user.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        412:
          $ref: '#/components/responses/PreconditionFailed'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - user
      summary: Delete a user
      description: Deletes the specified user.
      responses:
        200:
          description: Successfully deleted the user.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Response'
        403:
          $ref: '#/components/responses/Forbidden'
        412:
          $ref: '#/components/responses/PreconditionFailed'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/objects/{sub_key}/spaces:
    parameters:
      - $ref: '#/components/parameters/AuthQueryParam'
      - $ref: '#/components/parameters/SignatureQueryParam'
      - $ref: '#/components/parameters/TimestampQueryParam'
      - $ref: '#/components/parameters/SubKeyPathParam'
    get:
      tags:
        - space
      summary: Get all spaces
      description: Returns the spaces associated with the given subscriber key, optionally including each space's custom data object.
      parameters:
        - $ref: '#/components/parameters/SpaceIncludeQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/StartQueryParam'
        - $ref: '#/components/parameters/EndQueryParam'
        - $ref: '#/components/parameters/TotalCountQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        200:
          description: Successfully returned the list of spaces.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SpaceListResponse'
        304:
          description: Requested resource has not been modified since last retrieval.
        403:
          $ref: '#/components/responses/Forbidden'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    post:
      tags:
        - space
      summary: Create a space
      description: >
        Creates a space with the specified attributes. Returns the created space object, optionally including its custom data object.


        **Notes:**
          * Space ID and name are required.
          * The custom object can only contain scalar values.
          #
          # any other reasons to get a 400 besides omitting those two?
          #
          * Returns 409 if a space already exists with the specified ID
          * The request body _must_ be in JSON format; otherwise, returns 415.

      parameters:
        - $ref: '#/components/parameters/SpaceIncludeQueryParam'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SpaceInput'
        description: >
          JSON object with space attributes.
      responses:
        200:
          description: Successfully created the space.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SpaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/objects/{sub_key}/spaces/{space_id}:
    parameters:
      - $ref: '#/components/parameters/AuthQueryParam'
      - $ref: '#/components/parameters/SignatureQueryParam'
      - $ref: '#/components/parameters/TimestampQueryParam'
      - $ref: '#/components/parameters/SubKeyPathParam'
      - $ref: '#/components/parameters/SpaceIdPathParam'
    get:
      tags:
        - space
      summary: Get a space
      description: Returns the specified space, optionally including its custom data object.
      parameters:
        - $ref: '#/components/parameters/SpaceIncludeQueryParam'
      responses:
        200:
          description: Successfully returned the requested space.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SpaceResponse'
        304:
          description: Requested resource has not been modified since last retrieval.
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    patch:
      tags:
        - space
      summary: Update a space
      description: >
        Updates the specified space. Returns the space object, optionally including its custom data object.


        **Notes:**
          * You can change all of the space object's properties, except its ID.
          * Invalid property names are silently ignored and will _not_ cause a request to fail.
          * If you update the "custom" property, you must completely replace it; partial updates are not supported.
          * The custom object can only contain scalar values.
      parameters:
        - $ref: '#/components/parameters/SpaceIncludeQueryParam'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Space'
        description: >
          JSON object with space attributes to update.
      responses:
        200:
          description: Successfully updated the space.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SpaceResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        412:
          $ref: '#/components/responses/PreconditionFailed'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      tags:
        - space
      summary: Delete a space
      description: Deletes the specified space.
      responses:
        200:
          description: Successfully deleted the space.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Response'
        403:
          $ref: '#/components/responses/Forbidden'
        412:
          $ref: '#/components/responses/PreconditionFailed'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/objects/{sub_key}/users/{user_id}/spaces:
    parameters:
      - $ref: '#/components/parameters/AuthQueryParam'
      - $ref: '#/components/parameters/SignatureQueryParam'
      - $ref: '#/components/parameters/TimestampQueryParam'
      - $ref: '#/components/parameters/SubKeyPathParam'
      - $ref: '#/components/parameters/UserIdPathParam'
    get:
      tags:
        - membership
      summary: Get a user's list of space memberships
      description: >
        Returns the specified user's space memberships, optionally including the custom data objects for: the user's perspective on their membership set ("custom"), the user's perspective on the space ("space"), and the space's custom data ("space.custom").
      parameters:
        - $ref: '#/components/parameters/UserMembershipIncludeQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/StartQueryParam'
        - $ref: '#/components/parameters/EndQueryParam'
        - $ref: '#/components/parameters/TotalCountQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        200:
          description: Successfully returned the user's membership list.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserMembershipListResponse'
        304:
          description: Requested resource has not been modified since last retrieval.
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    patch:
      tags:
        - membership
      summary: Update a user's space memberships
      description: >
        Updates the specified user's space memberships. Use the **add**, **update**, and **remove** properties in the request body to perform those operations on one or more memberships.


        Returns the user's space memberships, optionally including:
          * the user's custom data object
          * the custom data objects for the user's membership in each space
          * each space's custom data object


        **Notes:**
          * You can change all of the membership object's properties, except its ID.
          * Invalid property names are silently ignored and will _not_ cause a request to fail.
          * If you update the "custom" property, you must completely replace it; partial updates are not supported.
          * The custom object can only contain scalar values.

      #
      # how do i get a 400 from this one? do we need any notes about it?
      #
      parameters:
        - $ref: '#/components/parameters/UserMembershipIncludeQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/StartQueryParam'
        - $ref: '#/components/parameters/EndQueryParam'
        - $ref: '#/components/parameters/TotalCountQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserMembershipInputChangeSet'
        description: >
          JSON object with changes to the user's space memberships.
      responses:
        200:
          description: Successfully updated the user's space memberships.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserMembershipListResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
  /v1/objects/{sub_key}/spaces/{space_id}/users:
    parameters:
      - $ref: '#/components/parameters/AuthQueryParam'
      - $ref: '#/components/parameters/SignatureQueryParam'
      - $ref: '#/components/parameters/TimestampQueryParam'
      - $ref: '#/components/parameters/SubKeyPathParam'
      - $ref: '#/components/parameters/SpaceIdPathParam'
    get:
      tags:
        - membership
      summary: Get the list of members in a space
      description: >
        Returns the users in a space, optionally including:
          * each user's custom data object
          * the custom data objects for each user's membership in the space
          * the space's custom data object
      parameters:
        - $ref: '#/components/parameters/SpaceMembershipIncludeQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/StartQueryParam'
        - $ref: '#/components/parameters/EndQueryParam'
        - $ref: '#/components/parameters/TotalCountQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        200:
          description: Successfully returned the space's user list.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SpaceMembershipListResponse'
        304:
          description: Requested resource has not been modified since last retrieval.
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
    patch:
      tags:
        - membership
      summary: Update the members in a space
      description: >
        Updates the specified space's user list. Use the **add**, **update**, and **remove** properties in the request body to perform those operations on one or more memberships.


        Returns the space's user memberships, optionally including:
          * the space's custom data object
          * the custom data objects for each user's membership in the space
          * each user's custom data object


        **Notes:**
          * You can change all of the membership object's properties, except its ID.
          * Invalid property names are silently ignored and will _not_ cause a request to fail.
          * If you update the "custom" property, you must completely replace it; partial updates are not supported.
          * The custom object can only contain scalar values.

      parameters:
        - $ref: '#/components/parameters/SpaceMembershipIncludeQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/StartQueryParam'
        - $ref: '#/components/parameters/EndQueryParam'
        - $ref: '#/components/parameters/TotalCountQueryParam'
        - $ref: '#/components/parameters/FilterQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SpaceMembershipInputChangeSet'
        description: >
          JSON object with changes to the space's user list.
      responses:
        200:
          description: Successfully updated the space's membership list.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SpaceMembershipListResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        429:
          $ref: '#/components/responses/TooManyRequests'
        500:
          $ref: '#/components/responses/Internal'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
components:
  parameters:
    SubKeyPathParam:
      name: sub_key
      in: path
      description: The subscriber key.
      required: true
      schema:
        type: string
        example: sub-c-406fe670-ff0a-11e8-a860-92908bb92f21
    UserIdPathParam:
      name: user_id
      in: path
      description: The user identifier.
      required: true
      schema:
        type: string
        example: charlie
    SpaceIdPathParam:
      name: space_id
      in: path
      description: The space identifier.
      required: true
      schema:
        type: string
        example: main
    UserIncludeQueryParam:
      name: include
      in: query
      description: List of additional/complex user attributes to include in response. Omit this query parameter if you don't want to retrieve additional attributes.
      schema:
        type: array
        items:
          type: string
          enum:
            - custom
        example:
          - custom
    SpaceIncludeQueryParam:
      name: include
      in: query
      description: List of additional/complex attributes to include in response. Omit this query parameter if you don't want to retrieve additional attributes.
      schema:
        type: array
        items:
          type: string
          enum:
            - custom
        example:
          - custom
    UserMembershipIncludeQueryParam:
      name: include
      in: query
      description: List of additional/complex attributes to include in response. Omit this query parameter if you don't want to retrieve additional attributes.
      schema:
        type: array
        items:
          type: string
          enum:
            - custom
            - space
            - space.custom
        example:
          - custom
          - space
    SpaceMembershipIncludeQueryParam:
      name: include
      in: query
      description: List of additional/complex attributes to include in response. Omit this query parameter if you don't want to retrieve additional attributes.
      schema:
        type: array
        items:
          type: string
          enum:
            - custom
            - user
            - user.custom
        example:
          - custom
          - user
    LimitQueryParam:
      name: limit
      in: query
      description: Number of objects to return in response. Default is 100, which is also the maximum value.
      schema:
        type: integer
        minimum: 0
        maximum: 100
        default: 100
        example: 10
    StartQueryParam:
      name: start
      in: query
      description: Previously-returned cursor bookmark for fetching the next page.
      schema:
        type: string
    EndQueryParam:
      name: end
      in: query
      description: Previously-returned cursor bookmark for fetching the previous page. Ignored if you also supply the start parameter.
      schema:
        type: string
    FilterQueryParam:
      name: filter
      in: query
      description: |
        Expression used to filter the results. Only objects whose properties satisfy the given expression are returned.

        The following grammar is supported:

        ```
        <expression>           ::= <and_expression> ( "||" <and_expression> )*
        <and_expression>       ::= <binary_condition> ( "&&" <binary_condition> )*
        <binary_condition>     ::= "!" <binary_condition> | "(" <expression> ")" | <relational_condition>
        <relational_condition> ::= <property_path> <relational_operator> <value>
        <property_path>        ::= <property_name> ( "." <property_name> )*
        <property_name>        ::= <identifier> | "[" <string> "]"
        <value>                ::= <string> | <number> | "true" | "false" | "null"

        Tokens

        <identifier>           ::=  <letter> | "$" | "_" ( <letter> | "$" | "_" | <digit> )*
        <relational_operator>  ::= "==" | "!=" | "<=" | ">=" | "<" | ">" | "LIKE"
        <string>               ::= <double_quote> ( "\" <double_quote> | "\" <special_char> | "\" "u" <hex_digit> <hex_digit> <hex_digit> <hex_digit> | <unicode_char> - <double_quote> - "\" )* <double_quote>
                                 | "'" ( "\" "'" | "\" <special_char> | "\" "u" <hex_digit> <hex_digit> <hex_digit> <hex_digit> | <unicode_char> - "'" - "\" )* "'"
        <number>               ::= ( "+" | "-" )? ( <digit> )* ( "." )? <digit> ( <digit> )* ( "e" | "E" ( "+" | "-" )? <digit> ( <digit> )* )?
        <letter>               ::= Unicode Letter (category; any kind of letter from any language)
        <digit>                ::= "0" .. "9"
        <hex_digit>            ::= <digit> | "A" .. "F"
        <double_quote>         ::= the " character
        <unicode_char>         ::= any character in the Unicode range from U+0020 to U+10FFFF inclusive
        <special_char>         ::= "\" | "/" | "b" | "f" | "n" | "r" | "t"
        ```

        Date/time properties, such as `created` and `updated`, must be compared to valid date/time strings
        formatted according to ISO 8601.

        **Custom properties** must have the same type as the value used in the expression;
        it is an error to compare a custom property of one type to a value of another type.
        Objects that do not have the referenced custom property at all are excluded regardless
        of the operator or value used in the expression. The `null` value can be used to filter out
        objects that do or do not have the referenced custom property.

        The operator `LIKE` supports wildcards denoted by the character `*`. A wildcard matches any sequence
        of arbitrary Unicode characters, including the empty sequence. The literal asterisk is matched when escaped
        using the backslash (`\`) character.

        Note that a value used with `LIKE` must be properly encoded just like any other string value. Thus,
        in order to escape an asterisk, the raw value must contain `\\*`.

        Finally, the entire expression must be properly URL-encoded when used in the query string.
      schema:
        type: string
      examples:
        'Simple expression':
          description: Return results whose custom property named `public` is equal to boolean `true`.
          value: custom.public == true
        'Date/time comparison':
          description: Return results that were modified on or after August 31st, 2019 (UTC).
          value: updated >= "2019-08-31T00:00:00Z"
        'Compound expression':
          description: Return results that don't have a description but have a non-empty custom `label` or `description` property.
          value: description == null && (custom.label != "" || custom.description != "")
        'Wildcard':
          description: Return results whose name starts with the letter `X`.
          value: name LIKE 'X*'
        'Escaped wildcard':
          description: Return results whose name contains an asterisk.
          value: name LIKE '*\\**'
    SortQueryParam:
      name: sort
      in: query
      description: |
        List of attributes to sort by.

        Append :asc or :desc to an attribute to specify sort direction. The default sort direction is ascending.
      schema:
        type: array
        items:
          type: string
          pattern: '^[^:]+(:(asc|desc))?$'
      example:
        - name
        - created:desc
    TotalCountQueryParam:
      name: count
      in: query
      description: Request totalCount to be included in paginated response. By default, totalCount is omitted.
      schema:
        type: boolean
        example: true
    AuthQueryParam:
      name: auth
      in: query
      description: |
        Authorization token with permissions to perform the request.

        If Access Manager is enabled, either a valid authorization token or a signature are required.

        See Access Manager documentation for details on how to obtain an authorization token.
      schema:
        type: string
        example: p0F2AkF0Gl043rhDdHRsCkNyZXOkRGNoYW6hZnNlY3JldAFDZ3JwoEN1c3KgQ3NwY6BDcGF0pERjaGFuoENncnCgQ3VzcqBDc3BjoERtZXRhoENzaWdYIGOAeTyWGJI-blahPGD9TuKlaW1YQgiB4uR_edmfq-61
    SignatureQueryParam:
      name: signature
      in: query
      description: |
        Signature used to verify that the request was signed with the secret key associated with the subscriber key.

        If Access Manager is enabled, either a valid authorization token or a signature are required.

        See Access Manager documentation for details on how to compute the signature.
      schema:
        type: string
        example: v2.YmvbpzHJlUDIMJOfD_CnsA8Uw2BJhwPeFZO1Qu5tfC4
    TimestampQueryParam:
      name: timestamp
      in: query
      description: |
        Unix epoch timestamp used as a nonce for signature computation. Must have no more than ± 60 second offset from NTP.

        Required if `signature` parameter is supplied.
      schema:
        type: integer
        example: 1563226304
  schemas:
    Space:
      description: Distinct interaction context in which users exchange messages (for example, a chat room).
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 1
              maxLength: 92
              description: |
                Space identifier. Must not be empty, and may contain up to 92 UTF-8 byte sequences.

                **Prohibited characters** are `,`, `/`, `\`, `*`, `:`, space,
                non-printable ASCII control characters, and Unicode zero.
              example: main
            name:
              type: string
              minLength: 1
              description: Name of the space. Must not be empty or consist only of whitespace characters.
              example: Main
            description:
              type: string
              description: Description of the space.
        - $ref: '#/components/schemas/CustomAttributes'
      example: &SpaceExampleSimple
        id: my-channel
        name: My space
        description: A space that is mine
    SpaceInput:
      description: Input object used for creating new spaces.
      allOf:
        - $ref: '#/components/schemas/Space'
      required:
        - id
        - name
      example:
        <<: *SpaceExampleSimple
    SpaceOutput:
      description: Object with space attributes used in responses.
      allOf:
        - $ref: '#/components/schemas/Space'
        - $ref: '#/components/schemas/ObjectMetadata'
      example: &SpaceOutputExampleSimple
        <<: *SpaceExampleSimple
        created: '2019-02-20T23:11:20.893755'
        updated: '2019-02-20T23:11:20.893755'
        eTag: RTc1NUQwNUItREMyNy00Q0YxLUJCNDItMEZDMTZDMzVCN0VGCg==
    SpaceResponse:
      description: Response body in which the data is at most one space object.
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SpaceOutput'
      example:
        status: 200
        data:
          <<: *SpaceOutputExampleSimple
    SpaceListResponse:
      description: Response body in which the data is an array of space objects.
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/SpaceOutput'
      example:
        status: 200
        data:
          - &SpaceOutputExampleFull
            <<: *SpaceExampleSimple
            custom: null
            created: '2019-02-20T23:11:20.893755'
            updated: '2019-02-20T23:11:20.893755'
            eTag: RTc1NUQwNUItREMyNy00Q0YxLUJCNDItMEZDMTZDMzVCN0VGCg==
          - &SpaceOutputExampleCustom
            id: main
            name: Main space
            description: The main space
            custom:
              public: true
              motd: Always check your spelling!
            created: '2019-02-20T23:11:20.893755'
            updated: '2019-02-20T23:11:20.893755'
            eTag: RTc1NUQwNUItREMyNy00Q0YxLUJCNDItMEZDMTZDMzVCN0VGCg==
        totalCount: 9
        next: MUIwQTAwMUItQkRBRC00NDkyLTgyMEMtODg2OUU1N0REMTNBCg==
        prev: M0FFODRENzMtNjY2Qy00RUExLTk4QzktNkY1Q0I2MUJFNDRCCg==
    User:
      description: Unique participant in messaging interactions.
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 1
              maxLength: 92
              description: |
                Unique identifier of a user. Must not be empty, and may contain up to 92 UTF-8 byte sequences.

                **Prohibited characters** are `,`, `/`, `\`, `*`, `:`, space,
                non-printable ASCII control characters, and Unicode zero.
              example: user-1
            name:
              type: string
              minLength: 1
              description: Name of the user. Must not be empty or consist only of whitespace characters.
              example: John Doe
            externalId:
              type: string
              description: User's identifier in external system.
            profileUrl:
              type: string
              format: uri
              description: URL for the user's profile picture. Syntax is as defined in RFC 3986.
              example: http://avatars.com/john-doe
            email:
              type: string
              format: email
              description: >
                The user's email address. Syntax is as defined by RFC 5322 and extended by RFC 6532, with one exception:
                the display-name part is not allowed (in other words, only the addr-spec part is allowed).
              example: john@example.com
        - $ref: '#/components/schemas/CustomAttributes'
      example: &UserExampleSimple
        id: user-1
        name: John Doe
        externalId: null
        profileUrl: null
        email: jack@twitter.com
    UserInput:
      description: Input object used for creating new users.
      allOf:
        - $ref: '#/components/schemas/User'
      required:
        - id
        - name
      example:
        <<: *UserExampleSimple
    UserOutput:
      description: Object with user attributes used in responses.
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/ObjectMetadata'
      example: &UserOutputExampleSimple
        <<: *UserExampleSimple
        created: '2019-02-20T23:11:20.893755'
        updated: '2019-02-20T23:11:20.893755'
        eTag: MDcyQ0REOTUtNEVBOC00QkY2LTgwOUUtNDkwQzI4MjgzMTcwCg==
    UserResponse:
      description: Response body in which the data is at most one user object.
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserOutput'
      example:
        status: 200
        data:
          <<: *UserOutputExampleSimple
    UserListResponse:
      description: Response body in which the data is an array of user objects.
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserOutput'
      example:
        status: 200
        data:
          - &UserOutputExampleFull
            <<: *UserExampleSimple
            custom: null
            created: '2019-02-20T23:11:20.893755'
            updated: '2019-02-20T23:11:20.893755'
            eTag: MDcyQ0REOTUtNEVBOC00QkY2LTgwOUUtNDkwQzI4MjgzMTcwCg==
          - &UserOutputExampleCustom
            id: user-2
            name: Bob Cat
            externalId: null
            profileUrl: null
            email: bobc@example.com
            custom:
              phone: '999-999-9999'
            created: '2019-02-19T13:10:20.893755'
            updated: '2019-02-21T03:29:00.173452'
            eTag: QkRENDA5MjItMUZCNC00REI5LUE4QTktRjJGNUMxNTc2MzE3Cg==
    SpaceMembership:
      description: >
        Relationship between a space and a user, from the space's perspective.
        Contains attributes of a user's membership in the space.
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Member user's identifier.
        - $ref: '#/components/schemas/CustomAttributes'
      example: &SpaceMembershipExampleSimple
        id: user-1
    SpaceMembershipInput:
      description: Input object used for adding users to a space.
      allOf:
        - $ref: '#/components/schemas/SpaceMembership'
      required:
        - id
      example:
        <<: *SpaceMembershipExampleSimple
    SpaceMembershipInputChangeSet:
      description: Object describing changes to the list of users that are members of the space.
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/SpaceMembershipInput'
        update:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/SpaceMembership'
            required:
              - id
        remove:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: User identifier.
            required:
              - id
      example:
        add:
          - *SpaceMembershipExampleSimple
        update:
          - &SpaceMembershipExampleCustom
            id: user-2
            custom:
              role: moderator
        remove:
          - id: user-0
    SpaceMembershipOutput:
      description: Object with space membership attributes used in responses.
      allOf:
        - $ref: '#/components/schemas/SpaceMembership'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserOutput'
        - $ref: '#/components/schemas/ObjectMetadata'
      example: &SpaceMembershipOutputExampleFull
        <<: *SpaceMembershipExampleSimple
        custom:
          role: admin
        user: *UserOutputExampleFull
        created: '2019-02-20T23:11:20.893755'
        updated: '2019-02-20T23:11:20.893755'
        eTag: QkRENDA5MjItMUZCNC00REI5LUE4QTktRjJGNUMxNTc2MzE3Cg==
    SpaceMembershipResponse:
      description: Response body in which the data is at most one space membership object.
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/SpaceMembershipOutput'
      example:
        status: 200
        data:
          <<: *SpaceMembershipOutputExampleFull
    SpaceMembershipListResponse:
      description: Response body in which the data is an array of space membership objects.
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/SpaceMembershipOutput'
      example:
        status: 200
        data:
          - *SpaceMembershipOutputExampleFull
          - &SpaceMembershipOutputExampleCustom
            <<: *SpaceMembershipExampleCustom
            user: *UserOutputExampleCustom
            created: '2019-02-20T23:11:20.893755'
            updated: '2019-02-20T23:11:20.893755'
            eTag: QkRENDA5MjItMUZCNC00REI5LUE4QTktRjJGNUMxNTc2MzE3Cg==
        totalCount: 37
        next: RDIwQUIwM0MtNUM2Ni00ODQ5LUFGRjMtNDk1MzNDQzE3MUVCCg==
        prev: MzY5RjkzQUQtNTM0NS00QjM0LUI0M0MtNjNBQUFGODQ5MTk2Cg==
    UserMembership:
      description: >
        Relationship between a space and a user, from the user's perspective.
        Contains attributes of a space in which the user is a member.
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Space identifier.
        - $ref: '#/components/schemas/CustomAttributes'
      example: &UserMembershipExampleSimple
        id: my-channel
    UserMembershipInput:
      description: Input object used for adding spaces in which the user is a member.
      allOf:
        - $ref: '#/components/schemas/UserMembership'
      required:
        - id
      example:
        <<: *UserMembershipExampleSimple
    UserMembershipInputChangeSet:
      description: Object describing changes to the list of spaces in which the user is a member.
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/UserMembershipInput'
        update:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/UserMembership'
            required:
              - id
        remove:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Space identifier.
            required:
              - id
      example:
        add:
          - *UserMembershipExampleSimple
        update:
          - &UserMembershipExampleCustom
            id: main
            custom:
              starred: true
        remove:
          - id: space-0
    UserMembershipOutput:
      description: Object with user membership attributes used in responses.
      allOf:
        - $ref: '#/components/schemas/UserMembership'
        - type: object
          properties:
            space:
              $ref: '#/components/schemas/SpaceOutput'
        - $ref: '#/components/schemas/ObjectMetadata'
      example: &UserMembershipOutputExampleFull
        <<: *UserMembershipExampleSimple
        custom:
          starred: false
        space: *SpaceOutputExampleSimple
        created: '2019-02-20T23:11:20.893755'
        updated: '2019-02-20T23:11:20.893755'
        eTag: RUNDMDUwNjktNUYwRC00RTI0LUI1M0QtNUUzNkE2NkU0MEVFCg==
    UserMembershipResponse:
      description: Response body in which the data is at most one user membership object.
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserMembershipOutput'
      example:
        status: 200
        data:
          <<: *UserMembershipOutputExampleFull
    UserMembershipListResponse:
      description: Response body in which the data is an array of user membership objects.
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserMembershipOutput'
      example:
        status: 200
        data:
          - *UserMembershipOutputExampleFull
          - &UserMembershipOutputExampleCustom
            <<: *UserMembershipExampleCustom
            space: *SpaceOutputExampleCustom
            created: '2019-02-20T23:11:20.893755'
            updated: '2019-02-20T23:11:20.893755'
            eTag: RUNDMDUwNjktNUYwRC00RTI0LUI1M0QtNUUzNkE2NkU0MEVFCg==
        totalCount: 7
        next: RDIwQUIwM0MtNUM2Ni00ODQ5LUFGRjMtNDk1MzNDQzE3MUVCCg==
        prev: MzY5RjkzQUQtNTM0NS00QjM0LUI0M0MtNjNBQUFGODQ5MTk2Cg==
    ObjectMetadata:
      description: Attributes included in all objects that are returned in responses.
      type: object
      properties:
        created:
          type: string
          format: date-time
          description: Date and time the object was created.
        updated:
          type: string
          format: date-time
          description: Date and time the object was last updated.
        eTag:
          type: string
          description: The object's content fingerprint used in conditional requests.
    CustomAttributes:
      description: Attribute used in objects that support application-defined custom attributes.
      type: object
      properties:
        custom:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: boolean
          description: JSON object of key/value pairs with supported data-types. Values must be scalar only; arrays or objects are not supported.
    Response:
      description: Successful response body used when a single object is returned.
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code.
        data:
          type: object
          description: Object returned.
    ListResponse:
      description: Successful response body used when an array of objects is returned.
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              type: array
              items:
                type: object
                description: Object returned.
              description: List of returned objects.
            totalCount:
              type: integer
              description: Total count of objects without pagination.
            next:
              type: string
              description: Cursor bookmark for fetching next page.
            prev:
              type: string
              description: Cursor bookmark for fetching previous page.
    ErrorResponse:
      type: object
      description: Error response body.
      properties:
        status:
          type: integer
          description: HTTP status code.
        error:
          type: object
          description: Error response.
          properties:
            message:
              type: string
              description: User-facing error message.
            source:
              type: string
              enum:
                - objects
              description: Internal source of the error.
            details:
              type: array
              items:
                $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      type: object
      description: Additional error detail included in some error responses.
      properties:
        message:
          type: string
          description: A user-facing error message.
          example: User email must be a valid email address.
        location:
          type: string
          description: >
            Name of the offending query string parameter,
            or a dot-delimited JSON path to the source of the error in the input document, if applicable.
          example: user.email
        locationType:
          type: string
          enum:
            - path
            - query
            - header
            - body
  responses:
    BadRequest:
      description: The request body contains invalid data.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 400
            error:
              message: Request payload contained invalid input.
              source: objects
              details:
                - message: User email must be a valid email address.
                  location: user.email
                  locationType: body
    Forbidden:
      description: >
        The client isn't authorized to perform this operation. The authorization key you provided doesn't have the required permissions for this operation.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 403
            error:
              message: Invalid signature
              source: authz
              details:
              - message: Client and server produced different signatures for the same inputs.
                location: signature
                locationType: query
    NotFound:
      description: The requested object was not found.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 404
            error:
              message: Requested object was not found.
              source: objects
    Conflict:
      description: An object with the given identifier already exists.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 409
            error:
              message: Object with the requested identifier already exists.
              source: objects
    PreconditionFailed:
      description: Conditional operation cannot be performed because the target object has changed since the last retrieval.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 412
            error:
              message: Object already changed by another request since last retrieval.
              source: objects
    UnsupportedMediaType:
      description: The format of the request body you supplied isn't supported. The request body must be in JSON format.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 415
            error:
              message: Request payload must be in JSON format.
              source: objects
    TooManyRequests:
      description: Request rate limit exceeded.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 429
            error:
              message: You have exceeded the maximum number of requests per second allowed for your subscriber key.
              source: objects
    Internal:
      description: An internal server error occurred.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 500
            error:
              message: An unexpected error occurred while processing the request.
              source: objects
    ServiceUnavailable:
      description: Request processing exceeded the maximum allowed time.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 503
            error:
              message: The server took longer to respond than the maximum allowed processing time.
              source: objects